nb = 3;

seq_b = downs_seq(seq_buf,100);   %Downsample to 1hz
seq_b.name = 'algo3';
seq_b.type = 'seq';

seq(nb,:) = seq_b;
clear seq_b

% Low_pass filter
[seq(nb,:).var.Ag] = mov_mean_filter(2,seq(nb,:).var.A);  % For 1hz sampling
[seq(nb,:).var.Mg] = mov_mean_filter(2,seq(nb,:).var.M);  % For 1hz sampling

% Compute variables
[seq(nb,:).var.Ad] = var_accd(seq(nb,:).var);
[seq(nb,:).var.O]  = var_odba(seq(nb,:).var);
[seq(nb,:).var.J]  = var_jerk(seq(nb,:).var);

[seq(nb,:).var.Pi,seq(nb,:).var.Ro,seq(nb,:).var.He] = var_saam(seq(nb,:).var);

% Correction pitch offset
seq(nb,:).var.Pi.data = seq(nb,:).var.Pi.data -(9/180*pi);

% Vertical speed with OCDR function
[s_depth_2,v] = ocdr_2(seq(nb,:).var.P.data(:,1),seq(nb,:).var.Pi.data(:,1),1);

%Filtering frequency 
fd = 0.20;

% Horizontal speed average : Need mean speed. We find by analysing reference speed
mean_s = 0.37;
%s_h = sqrt(max(mean_s.^2-v.^2,0));

% ODBA 
odba_threshold = 0.004; % ODBA threshold for no moving phases / old 0.0056
od = odba(seq(nb,:).var.A.data(:,1:3),1,fd);

s = zeros(length(s_depth_2(:,1)),1);
s_mean = ones(length(s_depth_2(:,1)),1);

for i=1:length(s(:,1)) 

    s(i,1) = mean_s;

    if od(i,1) < odba_threshold % We Initialy 0.0026
        s(i,1) = 0;
    end  

    % If high pitch speed equal to speed from OCDR function
    if ~isnan(s_depth_2(i,1))
        s(i,1) = abs(s_depth_2(i,1));
    end


end

% Store speed in the strcuture
seq(nb,:).var.S.data = s;
seq(nb,:).var.S.sampling = seq_buf.var.A.sampling;
seq(nb,:).var.S.sampling_rate = seq(nb,:).var.A.sampling_rate;
seq(nb,:).var.S.sampling_rate_unit = seq_buf.var.A.sampling_rate_unit;
seq(nb,:).var.S.name = 'S';
seq(nb,:).var.S.full_name = 'Speed';
%seq(nb,1).var.S.data(:,2) = seq(nb,:).var.S.data(:,1);

% Smooth speed acceleration between static and dynamic phases. The same
% smoothin is applied for all the algorithms. 
seq(nb,1).var.S.data(:,1) = smoothdata(seq(nb,1).var.S.data(:,1),'movmean',10);

clear od odba mean_s v odba_threshold nb 